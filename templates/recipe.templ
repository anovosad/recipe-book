// templates/recipe.templ
package templates

import (
	"recipe-book/models"
	"strconv"
	"fmt"
	"strings"
)

templ Recipe(data *models.PageData) {
	@Base(data.Recipe.Title, data) {
		<div class="recipe-view">
			<div class="recipe-header">
				<div class="recipe-title-section">
					<h1>{ data.Recipe.Title }</h1>
				</div>
				if data.IsLoggedIn && data.Recipe.CreatedBy == data.User.ID {
					<div class="recipe-actions">
						<a href={ templ.URL("/recipe/" + strconv.Itoa(data.Recipe.ID) + "/edit") } class="btn btn-primary">
							<i class="fas fa-edit"></i> Edit Recipe
						</a>
						<button onclick={ templ.JSFuncCall("deleteRecipe", strconv.Itoa(data.Recipe.ID)) } class="btn btn-danger">
							<i class="fas fa-trash"></i> Delete Recipe
						</button>
					</div>
				}
			</div>
			if len(data.Recipe.Images) > 0 {
				<div class="recipe-images">
					<h3><i class="fas fa-images"></i> Photos</h3>
					<div class="recipe-image-gallery">
						for _, img := range data.Recipe.Images {
							<div class="recipe-image-card">
								<img src={ "/uploads/" + img.Filename } alt={ img.Caption } class="recipe-image-main" onclick="openImageModal(this)"/>
								if img.Caption != "" {
									<div class="recipe-image-caption">{ img.Caption }</div>
								}
							</div>
						}
					</div>
				</div>
			}
			if data.Recipe.Description != "" {
				<div class="recipe-description">
					<p>{ data.Recipe.Description }</p>
				</div>
			}
			<div class="recipe-meta-section">
				<div class="meta-grid">
					<div class="meta-item">
						<i class="fas fa-clock"></i>
						<div>
							<strong>Prep Time</strong>
							<span>
								if data.Recipe.PrepTime > 0 {
									{ strconv.Itoa(data.Recipe.PrepTime) } minutes
								} else {
									Not specified
								}
							</span>
						</div>
					</div>
					<div class="meta-item">
						<i class="fas fa-fire"></i>
						<div>
							<strong>Cook Time</strong>
							<span>
								if data.Recipe.CookTime > 0 {
									{ strconv.Itoa(data.Recipe.CookTime) } minutes
								} else {
									Not specified
								}
							</span>
						</div>
					</div>
					<div class="meta-item">
						<i class="fas fa-users"></i>
						<div>
							<strong>Servings</strong>
							<span>
								if data.Recipe.Servings > 0 {
									{ strconv.Itoa(data.Recipe.Servings) } { data.Recipe.ServingUnit }
								} else {
									Not specified
								}
							</span>
						</div>
					</div>
					<div class="meta-item">
						<i class="fas fa-calendar"></i>
						<div>
							<strong>Created</strong>
							<span>{ data.Recipe.CreatedAt.Format("Jan 2, 2006") }</span>
						</div>
					</div>
				</div>
			</div>
			<div class="recipe-content">
				<div class="ingredients-section">
					<div class="ingredients-header">
						<h2><i class="fas fa-list"></i> Ingredients</h2>
						if data.Recipe.Servings > 0 {
							<div class="serving-calculator">
								<label for="servingSize">Adjust for:</label>
								<input type="number" id="servingSize" min="1" max="50" value={ strconv.Itoa(data.Recipe.Servings) } class="serving-input"/>
								<span class="serving-label">{ data.Recipe.ServingUnit }</span>
								<button type="button" id="resetServings" class="btn btn-secondary btn-sm">
									<i class="fas fa-undo"></i> Reset
								</button>
							</div>
						}
					</div>
					if len(data.Recipe.Ingredients) > 0 {
						<ul class="ingredients-list" id="ingredientsList">
							for _, ingredient := range data.Recipe.Ingredients {
								<li class="ingredient-item" data-original-quantity={ fmt.Sprintf("%.2f", ingredient.Quantity) }>
									<span class="quantity">{ fmt.Sprintf("%.2f", ingredient.Quantity) }</span>
									<span class="unit">{ ingredient.Unit }</span>
									<span class="name">{ ingredient.Name }</span>
								</li>
							}
						</ul>
					} else {
						<p class="no-ingredients">No ingredients specified</p>
					}
					if len(data.Recipe.Tags) > 0 {
						<div class="recipe-tags-compact">
							<h4><i class="fas fa-tags"></i> Categories</h4>
							<div class="recipe-tags">
								for _, tag := range data.Recipe.Tags {
									<a href={ templ.URL("/recipes?tag=" + strconv.Itoa(tag.ID)) } class="recipe-tag" title={ "View all " + tag.Name + " recipes" }>
										{ tag.Name }
									</a>
								}
							</div>
						</div>
					}
				</div>
				<div class="instructions-section">
					<h2><i class="fas fa-utensils"></i> Instructions</h2>
					<div class="instructions-content">
						@templ.Raw(strings.ReplaceAll(templ.EscapeString(data.Recipe.Instructions), "\n", "<br>"))
					</div>
				</div>
			</div>
			<div class="recipe-navigation">
				<a href="/recipes" class="btn btn-secondary">
					<i class="fas fa-arrow-left"></i> Back to Recipes
				</a>
			</div>
		</div>
		<!-- Image Modal for full-size viewing -->
		<div id="image-modal" class="image-modal" style="display: none;" onclick="closeImageModal()">
			<div class="image-modal-close" onclick="closeImageModal()">
				<i class="fas fa-times"></i>
			</div>
			<img id="modal-image" src="" alt=""/>
		</div>
		@RecipeScript(data.Recipe.Servings)
	}
}

templ RecipeScript(servings int) {
	<script>
		// Image modal functionality
		function openImageModal(img) {
			const modal = document.getElementById('image-modal');
			const modalImg = document.getElementById('modal-image');
			modalImg.src = img.src;
			modalImg.alt = img.alt;
			modal.style.display = 'flex';
			document.body.style.overflow = 'hidden'; // Prevent scrolling
		}
		
		function closeImageModal() {
			const modal = document.getElementById('image-modal');
			modal.style.display = 'none';
			document.body.style.overflow = 'auto'; // Restore scrolling
		}
		
		// Close modal with Escape key
		document.addEventListener('keydown', function(e) {
			if (e.key === 'Escape') {
				closeImageModal();
			}
		});
		
		// Recipe serving calculator
		document.addEventListener('DOMContentLoaded', function() {
			const servingInput = document.getElementById('servingSize');
			const resetButton = document.getElementById('resetServings');
			const originalServings = { strconv.Itoa(servings) };
			
			if (servingInput) {
				servingInput.addEventListener('input', function() {
					const newServings = parseInt(this.value) || 1;
					recalculateIngredients(newServings, originalServings);
				});
				
				servingInput.addEventListener('change', function() {
					const newServings = parseInt(this.value) || 1;
					recalculateIngredients(newServings, originalServings);
				});
			}
			
			if (resetButton) {
				resetButton.addEventListener('click', function() {
					servingInput.value = originalServings;
					recalculateIngredients(originalServings, originalServings);
				});
			}
		});
		
		function recalculateIngredients(newServings, originalServings) {
			const ingredientItems = document.querySelectorAll('.ingredient-item');
			const ratio = newServings / originalServings;
			
			ingredientItems.forEach(function(item) {
				const quantitySpan = item.querySelector('.quantity');
				const originalQuantity = parseFloat(item.dataset.originalQuantity);
				
				if (quantitySpan && !isNaN(originalQuantity)) {
					const newQuantity = originalQuantity * ratio;
					
					let displayQuantity;
					if (newQuantity < 0.1) {
						displayQuantity = newQuantity.toFixed(3);
					} else if (newQuantity < 1) {
						displayQuantity = newQuantity.toFixed(2);
					} else if (newQuantity < 10) {
						displayQuantity = newQuantity.toFixed(1);
					} else {
						displayQuantity = Math.round(newQuantity * 10) / 10;
					}
					
					displayQuantity = formatCookingQuantity(parseFloat(displayQuantity));
					quantitySpan.textContent = displayQuantity;
					
					if (ratio !== 1) {
						quantitySpan.classList.add('quantity-adjusted');
					} else {
						quantitySpan.classList.remove('quantity-adjusted');
					}
				}
			});
			
			const calculator = document.querySelector('.serving-calculator');
			if (calculator) {
				if (newServings !== originalServings) {
					calculator.classList.add('calculator-active');
				} else {
					calculator.classList.remove('calculator-active');
				}
			}
		}
		
		function formatCookingQuantity(quantity) {
			const fractions = {
				0.125: '⅛',
				0.25: '¼', 
				0.33: '⅓',
				0.375: '⅜',
				0.5: '½',
				0.625: '⅝',
				0.67: '⅔',
				0.75: '¾',
				0.875: '⅞'
			};
			
			if (quantity === Math.floor(quantity)) {
				return quantity.toString();
			}
			
			const rounded = Math.round(quantity * 1000) / 1000;
			for (const [decimal, fraction] of Object.entries(fractions)) {
				if (Math.abs(rounded - decimal) < 0.01) {
					return fraction;
				}
			}
			
			const whole = Math.floor(quantity);
			const remainder = quantity - whole;
			
			for (const [decimal, fraction] of Object.entries(fractions)) {
				if (Math.abs(remainder - decimal) < 0.01) {
					return whole > 0 ? `${whole}${fraction}` : fraction;
				}
			}
			
			if (quantity < 1) {
				return quantity.toFixed(2);
			} else {
				return quantity.toFixed(1);
			}
		}
	</script>
}