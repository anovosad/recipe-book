// templates/recipes.templ
package templates

import (
	"recipe-book/models"
	"fmt"
	"strconv"
)

templ Recipes(data *models.PageData) {
	@Base("Recipes", data) {
		<div class="page-header">
			<h1><i class="fas fa-utensils"></i> Recipes</h1>
			<!-- Search moved into header -->
			<div class="header-search">
				<form action="/recipes" method="GET" class="search-form">
					<div class="search-container">
						<input type="text" name="search" class="search-input" placeholder="Search recipes..." value={ data.SearchQuery }/>
						<button type="submit" class="search-btn">
							<i class="fas fa-search"></i>
						</button>
						<!-- Preserve current tag filter when searching -->
						if data.ActiveTagID != 0 {
							<input type="hidden" name="tag" value={ strconv.Itoa(data.ActiveTagID) }/>
						}
					</div>
				</form>
			</div>
			<div class="header-actions">
				if data.IsLoggedIn {
					<a href="/recipe/new" class="btn btn-primary">
						<i class="fas fa-plus"></i> Add New Recipe
					</a>
				}
			</div>
			<!-- Tag Filter Section merged into header -->
			if len(data.Tags) > 0 {
				<div class="filter-section-inline">
					<div class="filter-header">
						<h3><i class="fas fa-filter"></i> Filter by Tags</h3>
						if data.ActiveTagID != 0 {
							<a href={ templ.URL("/recipes" + if data.SearchQuery != "" { "?search=" + data.SearchQuery } else { "" }) } class="btn btn-secondary btn-sm clear-filters">
								<i class="fas fa-times"></i> Clear Tag Filter
							</a>
						}
					</div>
					<div class="tag-filters">
						for _, tag := range data.Tags {
							@TagFilterButton(tag, data.ActiveTagID, data.SearchQuery)
						}
					</div>
				</div>
			}
		</div>
		if len(data.Recipes) > 0 {
			<!-- Card View (now the only view) -->
			<div class="recipe-grid">
				for _, recipe := range data.Recipes {
					@RecipeCard(recipe, data)
				}
			</div>
		} else {
			<div class="empty-state">
				<i class="fas fa-utensils"></i>
				<h3>No recipes found</h3>
				<p>
					if data.SearchQuery != "" || data.ActiveTag != nil {
						No recipes match your current filters. 
						<a href="/recipes">Clear filters</a> to see all recipes.
					} else if data.IsLoggedIn {
						Be the first to add a delicious recipe!
					} else {
						Please log in to add recipes.
					}
				</p>
				if data.IsLoggedIn && data.SearchQuery == "" && data.ActiveTag == nil {
					<a href="/recipe/new" class="btn btn-primary">
						<i class="fas fa-plus"></i> Add Your First Recipe
					</a>
				}
			</div>
		}
		<script>
			// Enhanced tag filter interactions with smooth transitions
			document.addEventListener('DOMContentLoaded', function() {
				// Add click handlers for tag filters to show loading state
				const tagFilters = document.querySelectorAll('.tag-filter, .recipe-tag');
				tagFilters.forEach(filter => {
					filter.addEventListener('click', function(e) {
						// Show loading state
						const originalContent = this.innerHTML;
						this.style.opacity = '0.7';
						this.innerHTML = '<i class="fas fa-spinner fa-spin"></i> ' + this.textContent.trim();
						
						// Let the navigation happen naturally, but restore content if it fails
						setTimeout(() => {
							this.innerHTML = originalContent;
							this.style.opacity = '1';
						}, 2000);
					});
				});
			});
		</script>
	}
}

templ TagFilterButton(tag models.Tag, activeTagID int, searchQuery string) {
	if tag.ID == activeTagID {
		<a href={ templ.URL("/recipes" + if searchQuery != "" { "?search=" + searchQuery } else { "" }) } 
		   class="tag-filter active" 
		   title={ "Currently filtering by " + tag.Name + " - click to remove filter" }>
			{ tag.Name }
		</a>
	} else {
		<a href={ templ.URL("/recipes?tag=" + strconv.Itoa(tag.ID) + if searchQuery != "" { "&search=" + searchQuery } else { "" }) } 
		   class="tag-filter" 
		   title={ "Filter recipes by " + tag.Name }>
			{ tag.Name }
		</a>
	}
}

templ RecipeCard(recipe models.Recipe, data *models.PageData) {
	<div class="recipe-card">
		<div class="recipe-header">
			<h3 class="recipe-title">
				<a href={ templ.URL("/recipe/" + strconv.Itoa(recipe.ID)) }>{ recipe.Title }</a>
			</h3>
		</div>
		if recipe.Description != "" {
			<p class="recipe-description">{ recipe.Description }</p>
		}
		if len(recipe.Tags) > 0 {
			<div class="recipe-tags">
				for _, tag := range recipe.Tags {
					@RecipeTagButton(tag, data.ActiveTagID, data.SearchQuery)
				}
			</div>
		}
		if data.IsLoggedIn && recipe.CreatedBy == data.User.ID {
			<div class="recipe-actions">
				<a href={ templ.URL("/recipe/" + strconv.Itoa(recipe.ID) + "/edit") } class="btn btn-primary btn-sm">
					<i class="fas fa-edit"></i> Edit
				</a>
				<button onclick={ "deleteRecipe(" + strconv.Itoa(recipe.ID) + ")" } class="btn btn-danger btn-sm">
					<i class="fas fa-trash"></i> Delete
				</button>
			</div>
		}
	</div>
}

templ RecipeTagButton(tag models.Tag, activeTagID int, searchQuery string) {
	if tag.ID == activeTagID {
		<a href={ templ.URL("/recipes" + if searchQuery != "" { "?search=" + searchQuery } else { "" }) } 
		   class="recipe-tag recipe-tag-active" 
		   title={ "Remove " + tag.Name + " filter" }>
			{ tag.Name }
		</a>
	} else {
		<a href={ templ.URL("/recipes?tag=" + strconv.Itoa(tag.ID) + if searchQuery != "" { "&search=" + searchQuery } else { "" }) } 
		   class="recipe-tag" 
		   title={ "Filter by " + tag.Name }>
			{ tag.Name }
		</a>
	}
}