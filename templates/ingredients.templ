
// templates/ingredients.templ
package templates

import (
	"recipe-book/models"
	"strconv"
)

templ Ingredients(data *models.PageData) {
	@Base("Ingredients", data) {
		<div class="page-header compact">
			<h1><i class="fas fa-leaf"></i> Ingredients</h1>
			if data.IsLoggedIn {
				<button type="button" id="add-ingredient-btn" class="btn btn-primary btn-sm">
					<i class="fas fa-plus"></i> Add Ingredient
				</button>
			}
		</div>
		if len(data.Ingredients) > 0 {
			<div class="ingredients-grid compact">
				for _, ingredient := range data.Ingredients {
					<div class="ingredient-card compact">
						<div class="ingredient-content">
							<a href={ templ.URL("/recipes?search=" + ingredient.Name) } class="tag-name" title={ "Find recipes using " + ingredient.Name }>
								{ ingredient.Name }
							</a>
							if data.IsLoggedIn {
								<button onclick={ templ.JSFuncCall("deleteIngredient", strconv.Itoa(ingredient.ID), ingredient.Name) } class="btn-delete" title={ "Delete " + ingredient.Name }>
									<i class="fas fa-trash"></i>
								</button>
							}
						</div>
					</div>
				}
			</div>
		} else {
			<div class="empty-state compact">
				<i class="fas fa-leaf"></i>
				<h3>No ingredients found</h3>
				<p>
					if data.IsLoggedIn {
						Add some ingredients to get started!
					} else {
						Please log in to manage ingredients.
					}
				</p>
				if data.IsLoggedIn {
					<button type="button" id="add-first-ingredient-btn" class="btn btn-primary">
						<i class="fas fa-plus"></i> Add Your First Ingredient
					</button>
				}
			</div>
		}
		@IngredientFormModal()
		@IngredientsScript()
	}
}

templ IngredientFormModal() {
	<div id="ingredient-form-modal" class="modal hidden">
		<div class="modal-content">
			<div class="modal-header">
				<h3><i class="fas fa-plus-circle"></i> New Ingredient</h3>
				<button type="button" class="modal-close">
					<i class="fas fa-times"></i>
				</button>
			</div>
			<div class="modal-body">
				<form id="ingredientFormModal" class="ingredient-form">
					<div class="form-group">
						<label for="ingredient-name">Ingredient Name *</label>
						<input type="text" id="ingredient-name" name="name" class="form-control" required/>
					</div>
					<div class="modal-actions">
						<button type="button" class="btn btn-secondary modal-close">
							<i class="fas fa-times"></i> Cancel
						</button>
						<button type="submit" class="btn btn-primary">
							<i class="fas fa-save"></i> Save Ingredient
						</button>
					</div>
				</form>
			</div>
		</div>
	</div>
}

// Simplified script using RecipeBook functionality
templ IngredientsScript() {
	<script>
		RecipeBook.on('app:initialized', function() {
			const modal = document.getElementById('ingredient-form-modal');
			const form = document.getElementById('ingredientFormModal');
			const addBtn = document.getElementById('add-ingredient-btn');
			const addFirstBtn = document.getElementById('add-first-ingredient-btn');
			
			// Open modal handlers
			[addBtn, addFirstBtn].forEach(btn => {
				if (btn) {
					btn.addEventListener('click', () => {
						modal.classList.remove('hidden');
						modal.style.display = 'flex';
						document.getElementById('ingredient-name').focus();
					});
				}
			});
			
			// Close modal handlers (using RecipeBook modal system)
			modal.querySelectorAll('.modal-close').forEach(btn => {
				btn.addEventListener('click', () => {
					RecipeBook.closeModal(modal);
					modal.classList.add('hidden');
					document.getElementById('ingredient-name').value = '';
				});
			});
			
			// Form submission
			form.addEventListener('submit', async function(e) {
				e.preventDefault();
				
				// Use centralized validation
				if (!validateIngredientForm(this)) return;
				
				const submitBtn = this.querySelector('button[type="submit"]');
				const removeLoading = RecipeBook.addLoadingState(submitBtn, 'Saving...');
				
				try {
					const ingredientData = {
						name: this.querySelector('#ingredient-name').value.trim()
					};
					
					const response = await RecipeBook.apiRequest('/api/ingredients', {
						method: 'POST',
						headers: { 'Content-Type': 'application/json' },
						body: JSON.stringify(ingredientData)
					});
					
					if (response.success) {
						RecipeBook.showNotification(response.message, 'success');
						RecipeBook.closeModal(modal);
						modal.classList.add('hidden');
						setTimeout(() => window.location.reload(), 1000);
					} else {
						RecipeBook.showNotification(response.error || 'Failed to save ingredient', 'error');
					}
				} catch (error) {
					console.error('Ingredient save error:', error);
					RecipeBook.showNotification('Failed to save ingredient. Please try again.', 'error');
				} finally {
					removeLoading();
				}
			});
		});
	</script>
}
