// Code generated by templ - DO NOT EDIT.

// templ: version: v0.3.865
// templates/recipe-form.templ - Cleaned up version

package templates

//lint:file-ignore SA4006 This context is only used if a nested component is present.

import "github.com/a-h/templ"
import templruntime "github.com/a-h/templ/runtime"

import (
	"fmt"
	"recipe-book/models"
	"strconv"
)

func recipeUrl(data *models.PageData) string {
	if data.Recipe != nil {
		return "/recipe/" + strconv.Itoa(data.Recipe.ID)
	}
	return "/recipes"
}

func getRecipeItem(recipe *models.Recipe, item models.RecipeItem, defaultValue string) string {
	if recipe == nil {
		return defaultValue
	}
	switch item {
	case models.RecipeItemTitle:
		return recipe.Title
	case models.RecipeItemDescription:
		return recipe.Description
	case models.RecipeItemPrepTime:
		return strconv.Itoa(recipe.PrepTime)
	case models.RecipeItemCookTime:
		return strconv.Itoa(recipe.CookTime)
	case models.RecipeItemServings:
		return strconv.Itoa(recipe.Servings)
	case models.RecipeItemServingUnit:
		return recipe.ServingUnit
	case models.RecipeItemInstructions:
		return recipe.Instructions
	default:
		return defaultValue
	}
}

func RecipeForm(data *models.PageData) templ.Component {
	return templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
		templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
		if templ_7745c5c3_CtxErr := ctx.Err(); templ_7745c5c3_CtxErr != nil {
			return templ_7745c5c3_CtxErr
		}
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
		if !templ_7745c5c3_IsBuffer {
			defer func() {
				templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err == nil {
					templ_7745c5c3_Err = templ_7745c5c3_BufErr
				}
			}()
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var1 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var1 == nil {
			templ_7745c5c3_Var1 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		templ_7745c5c3_Var2 := templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
			templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
			templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
			if !templ_7745c5c3_IsBuffer {
				defer func() {
					templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
					if templ_7745c5c3_Err == nil {
						templ_7745c5c3_Err = templ_7745c5c3_BufErr
					}
				}()
			}
			ctx = templ.InitializeContext(ctx)
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 1, "<div class=\"form-container\"><div class=\"form-header\"><h1>")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			if data.Recipe != nil {
				templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 2, "<i class=\"fas fa-edit\"></i> Edit Recipe")
				if templ_7745c5c3_Err != nil {
					return templ_7745c5c3_Err
				}
			} else {
				templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 3, "<i class=\"fas fa-plus\"></i> New Recipe")
				if templ_7745c5c3_Err != nil {
					return templ_7745c5c3_Err
				}
			}
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 4, "</h1></div><form id=\"recipeForm\" class=\"recipe-form\" enctype=\"multipart/form-data\">")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			templ_7745c5c3_Err = RecipeImageSection(data.Recipe).Render(ctx, templ_7745c5c3_Buffer)
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			templ_7745c5c3_Err = RecipeBasicInfoSection(data.Recipe).Render(ctx, templ_7745c5c3_Buffer)
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			templ_7745c5c3_Err = RecipeDetailsSection(data.Recipe).Render(ctx, templ_7745c5c3_Buffer)
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			templ_7745c5c3_Err = RecipeIngredientsSection(data.Recipe, data.Ingredients).Render(ctx, templ_7745c5c3_Buffer)
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			templ_7745c5c3_Err = RecipeTagsSection(data.Recipe, data.Tags).Render(ctx, templ_7745c5c3_Buffer)
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			templ_7745c5c3_Err = RecipeInstructionsSection(data.Recipe).Render(ctx, templ_7745c5c3_Buffer)
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 5, "<div class=\"form-actions\"><a href=\"")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			var templ_7745c5c3_Var3 templ.SafeURL = templ.URL(recipeUrl(data))
			_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(string(templ_7745c5c3_Var3)))
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 6, "\" class=\"btn btn-secondary\"><i class=\"fas fa-times\"></i> Cancel</a> <button type=\"submit\" class=\"btn btn-primary\"><i class=\"fas fa-save\"></i> ")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			if data.Recipe != nil {
				templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 7, "Update Recipe")
				if templ_7745c5c3_Err != nil {
					return templ_7745c5c3_Err
				}
			} else {
				templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 8, "Save Recipe")
				if templ_7745c5c3_Err != nil {
					return templ_7745c5c3_Err
				}
			}
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 9, "</button></div></form></div>")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			templ_7745c5c3_Err = IngredientModal().Render(ctx, templ_7745c5c3_Buffer)
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 10, " ")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			templ_7745c5c3_Err = TagModal().Render(ctx, templ_7745c5c3_Buffer)
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 11, " ")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			templ_7745c5c3_Err = RecipeFormScript(data.Recipe, data.Ingredients).Render(ctx, templ_7745c5c3_Buffer)
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			return nil
		})
		templ_7745c5c3_Err = Base(data.Title, data).Render(templ.WithChildren(ctx, templ_7745c5c3_Var2), templ_7745c5c3_Buffer)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		return nil
	})
}

func RecipeImageSection(recipe *models.Recipe) templ.Component {
	return templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
		templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
		if templ_7745c5c3_CtxErr := ctx.Err(); templ_7745c5c3_CtxErr != nil {
			return templ_7745c5c3_CtxErr
		}
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
		if !templ_7745c5c3_IsBuffer {
			defer func() {
				templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err == nil {
					templ_7745c5c3_Err = templ_7745c5c3_BufErr
				}
			}()
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var4 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var4 == nil {
			templ_7745c5c3_Var4 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 12, "<div class=\"form-section\"><h3>Recipe Images</h3>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		if recipe != nil && len(recipe.Images) > 0 {
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 13, "<div class=\"existing-images\"><h4>Current Images</h4><div class=\"image-gallery\">")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			for _, img := range recipe.Images {
				templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 14, "<div class=\"image-item\" data-image-id=\"")
				if templ_7745c5c3_Err != nil {
					return templ_7745c5c3_Err
				}
				var templ_7745c5c3_Var5 string
				templ_7745c5c3_Var5, templ_7745c5c3_Err = templ.JoinStringErrs(strconv.Itoa(img.ID))
				if templ_7745c5c3_Err != nil {
					return templ.Error{Err: templ_7745c5c3_Err, FileName: `templates/recipe-form.templ`, Line: 89, Col: 66}
				}
				_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var5))
				if templ_7745c5c3_Err != nil {
					return templ_7745c5c3_Err
				}
				templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 15, "\"><img src=\"")
				if templ_7745c5c3_Err != nil {
					return templ_7745c5c3_Err
				}
				var templ_7745c5c3_Var6 string
				templ_7745c5c3_Var6, templ_7745c5c3_Err = templ.JoinStringErrs("/uploads/" + img.Filename)
				if templ_7745c5c3_Err != nil {
					return templ.Error{Err: templ_7745c5c3_Err, FileName: `templates/recipe-form.templ`, Line: 90, Col: 44}
				}
				_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var6))
				if templ_7745c5c3_Err != nil {
					return templ_7745c5c3_Err
				}
				templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 16, "\" alt=\"")
				if templ_7745c5c3_Err != nil {
					return templ_7745c5c3_Err
				}
				var templ_7745c5c3_Var7 string
				templ_7745c5c3_Var7, templ_7745c5c3_Err = templ.JoinStringErrs(img.Caption)
				if templ_7745c5c3_Err != nil {
					return templ.Error{Err: templ_7745c5c3_Err, FileName: `templates/recipe-form.templ`, Line: 90, Col: 64}
				}
				_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var7))
				if templ_7745c5c3_Err != nil {
					return templ_7745c5c3_Err
				}
				templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 17, "\" class=\"recipe-image-preview\"><div class=\"image-controls\"><input type=\"text\" value=\"")
				if templ_7745c5c3_Err != nil {
					return templ_7745c5c3_Err
				}
				var templ_7745c5c3_Var8 string
				templ_7745c5c3_Var8, templ_7745c5c3_Err = templ.JoinStringErrs(img.Caption)
				if templ_7745c5c3_Err != nil {
					return templ.Error{Err: templ_7745c5c3_Err, FileName: `templates/recipe-form.templ`, Line: 92, Col: 46}
				}
				_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var8))
				if templ_7745c5c3_Err != nil {
					return templ_7745c5c3_Err
				}
				templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 18, "\" placeholder=\"Image caption\" class=\"image-caption\"> <button type=\"button\" class=\"btn btn-danger btn-sm delete-image\" data-image-id=\"")
				if templ_7745c5c3_Err != nil {
					return templ_7745c5c3_Err
				}
				var templ_7745c5c3_Var9 string
				templ_7745c5c3_Var9, templ_7745c5c3_Err = templ.JoinStringErrs(strconv.Itoa(img.ID))
				if templ_7745c5c3_Err != nil {
					return templ.Error{Err: templ_7745c5c3_Err, FileName: `templates/recipe-form.templ`, Line: 93, Col: 109}
				}
				_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var9))
				if templ_7745c5c3_Err != nil {
					return templ_7745c5c3_Err
				}
				templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 19, "\"><i class=\"fas fa-trash\"></i></button></div></div>")
				if templ_7745c5c3_Err != nil {
					return templ_7745c5c3_Err
				}
			}
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 20, "</div></div>")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 21, "<div class=\"image-upload-section\"><label for=\"recipe_images\">Add New Images</label> <input type=\"file\" id=\"recipe_images\" name=\"recipe_images\" multiple accept=\"image/*\" class=\"form-control\"><div class=\"help-text\"><i class=\"fas fa-info-circle\"></i> You can select multiple images. Supported formats: JPG, PNG, GIF. Max size: 5MB per image.</div><div id=\"image-preview-container\" class=\"image-preview-container\"></div></div></div>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		return nil
	})
}

func RecipeBasicInfoSection(recipe *models.Recipe) templ.Component {
	return templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
		templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
		if templ_7745c5c3_CtxErr := ctx.Err(); templ_7745c5c3_CtxErr != nil {
			return templ_7745c5c3_CtxErr
		}
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
		if !templ_7745c5c3_IsBuffer {
			defer func() {
				templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err == nil {
					templ_7745c5c3_Err = templ_7745c5c3_BufErr
				}
			}()
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var10 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var10 == nil {
			templ_7745c5c3_Var10 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 22, "<div class=\"form-section\"><h3>Basic Information</h3><div class=\"form-group\"><label for=\"title\">Recipe Title *</label> <input type=\"text\" id=\"title\" name=\"title\" class=\"form-control\" value=\"")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		var templ_7745c5c3_Var11 string
		templ_7745c5c3_Var11, templ_7745c5c3_Err = templ.JoinStringErrs(getRecipeItem(recipe, models.RecipeItemTitle, ""))
		if templ_7745c5c3_Err != nil {
			return templ.Error{Err: templ_7745c5c3_Err, FileName: `templates/recipe-form.templ`, Line: 120, Col: 64}
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var11))
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 23, "\" required></div><div class=\"form-group\"><label for=\"description\">Description</label> <textarea id=\"description\" name=\"description\" class=\"form-control\" rows=\"3\" placeholder=\"Brief description of your recipe\">")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		var templ_7745c5c3_Var12 string
		templ_7745c5c3_Var12, templ_7745c5c3_Err = templ.JoinStringErrs(getRecipeItem(recipe, models.RecipeItemDescription, ""))
		if templ_7745c5c3_Err != nil {
			return templ.Error{Err: templ_7745c5c3_Err, FileName: `templates/recipe-form.templ`, Line: 125, Col: 111}
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var12))
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 24, "</textarea></div></div>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		return nil
	})
}

func RecipeDetailsSection(recipe *models.Recipe) templ.Component {
	return templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
		templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
		if templ_7745c5c3_CtxErr := ctx.Err(); templ_7745c5c3_CtxErr != nil {
			return templ_7745c5c3_CtxErr
		}
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
		if !templ_7745c5c3_IsBuffer {
			defer func() {
				templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err == nil {
					templ_7745c5c3_Err = templ_7745c5c3_BufErr
				}
			}()
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var13 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var13 == nil {
			templ_7745c5c3_Var13 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 25, "<div class=\"form-section\"><h3>Recipe Details</h3><div class=\"form-grid\"><div class=\"form-group\"><label for=\"prep_time\">Prep Time (minutes)</label> <input type=\"number\" id=\"prep_time\" name=\"prep_time\" class=\"form-control\" value=\"")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		var templ_7745c5c3_Var14 string
		templ_7745c5c3_Var14, templ_7745c5c3_Err = templ.JoinStringErrs(getRecipeItem(recipe, models.RecipeItemPrepTime, ""))
		if templ_7745c5c3_Err != nil {
			return templ.Error{Err: templ_7745c5c3_Err, FileName: `templates/recipe-form.templ`, Line: 137, Col: 68}
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var14))
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 26, "\" min=\"0\"></div><div class=\"form-group\"><label for=\"cook_time\">Cook Time (minutes)</label> <input type=\"number\" id=\"cook_time\" name=\"cook_time\" class=\"form-control\" value=\"")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		var templ_7745c5c3_Var15 string
		templ_7745c5c3_Var15, templ_7745c5c3_Err = templ.JoinStringErrs(getRecipeItem(recipe, models.RecipeItemCookTime, ""))
		if templ_7745c5c3_Err != nil {
			return templ.Error{Err: templ_7745c5c3_Err, FileName: `templates/recipe-form.templ`, Line: 142, Col: 68}
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var15))
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 27, "\" min=\"0\"></div><div class=\"form-group\"><label for=\"servings\">Servings</label> <input type=\"number\" id=\"servings\" name=\"servings\" class=\"form-control\" value=\"")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		var templ_7745c5c3_Var16 string
		templ_7745c5c3_Var16, templ_7745c5c3_Err = templ.JoinStringErrs(getRecipeItem(recipe, models.RecipeItemServings, ""))
		if templ_7745c5c3_Err != nil {
			return templ.Error{Err: templ_7745c5c3_Err, FileName: `templates/recipe-form.templ`, Line: 147, Col: 68}
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var16))
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 28, "\" min=\"1\"></div><div class=\"form-group\"><label for=\"serving_unit\">Serving Unit</label> <select id=\"serving_unit\" name=\"serving_unit\" class=\"form-control\" data-value=\"")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		var templ_7745c5c3_Var17 string
		templ_7745c5c3_Var17, templ_7745c5c3_Err = templ.JoinStringErrs(getRecipeItem(recipe, models.RecipeItemServingUnit, "people"))
		if templ_7745c5c3_Err != nil {
			return templ.Error{Err: templ_7745c5c3_Err, FileName: `templates/recipe-form.templ`, Line: 151, Col: 145}
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var17))
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 29, "\">")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = ServingUnitOptions(getRecipeItem(recipe, models.RecipeItemServingUnit, "people")).Render(ctx, templ_7745c5c3_Buffer)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 30, "</select></div></div></div>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		return nil
	})
}

func ServingUnitOptions(currentUnit string) templ.Component {
	return templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
		templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
		if templ_7745c5c3_CtxErr := ctx.Err(); templ_7745c5c3_CtxErr != nil {
			return templ_7745c5c3_CtxErr
		}
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
		if !templ_7745c5c3_IsBuffer {
			defer func() {
				templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err == nil {
					templ_7745c5c3_Err = templ_7745c5c3_BufErr
				}
			}()
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var18 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var18 == nil {
			templ_7745c5c3_Var18 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		for _, unit := range models.ServingUnits {
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 31, "<option value=\"")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			var templ_7745c5c3_Var19 string
			templ_7745c5c3_Var19, templ_7745c5c3_Err = templ.JoinStringErrs(unit.Value)
			if templ_7745c5c3_Err != nil {
				return templ.Error{Err: templ_7745c5c3_Err, FileName: `templates/recipe-form.templ`, Line: 161, Col: 28}
			}
			_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var19))
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 32, "\"")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			if unit.Value == currentUnit {
				templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 33, " selected")
				if templ_7745c5c3_Err != nil {
					return templ_7745c5c3_Err
				}
			}
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 34, ">")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			var templ_7745c5c3_Var20 string
			templ_7745c5c3_Var20, templ_7745c5c3_Err = templ.JoinStringErrs(unit.Label)
			if templ_7745c5c3_Err != nil {
				return templ.Error{Err: templ_7745c5c3_Err, FileName: `templates/recipe-form.templ`, Line: 161, Col: 83}
			}
			_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var20))
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 35, "</option>")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
		}
		return nil
	})
}

func RecipeIngredientsSection(recipe *models.Recipe, ingredients []models.Ingredient) templ.Component {
	return templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
		templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
		if templ_7745c5c3_CtxErr := ctx.Err(); templ_7745c5c3_CtxErr != nil {
			return templ_7745c5c3_CtxErr
		}
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
		if !templ_7745c5c3_IsBuffer {
			defer func() {
				templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err == nil {
					templ_7745c5c3_Err = templ_7745c5c3_BufErr
				}
			}()
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var21 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var21 == nil {
			templ_7745c5c3_Var21 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 36, "<div class=\"form-section\"><div class=\"flex-between mb-3\"><h3>Ingredients</h3><button type=\"button\" id=\"add-new-ingredient-btn\" class=\"btn btn-secondary btn-sm\"><i class=\"fas fa-plus-circle\"></i> Add New Ingredient</button></div><div id=\"ingredients-container\">")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		if recipe != nil && len(recipe.Ingredients) > 0 {
			for _, ingredient := range recipe.Ingredients {
				templ_7745c5c3_Err = ExistingIngredientRow(ingredient, ingredients).Render(ctx, templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err != nil {
					return templ_7745c5c3_Err
				}
			}
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 37, "</div><button type=\"button\" id=\"add-ingredient\" class=\"btn btn-secondary\"><i class=\"fas fa-plus\"></i> Add Ingredient</button></div>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		return nil
	})
}

func ExistingIngredientRow(ingredient models.RecipeIngredient, allIngredients []models.Ingredient) templ.Component {
	return templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
		templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
		if templ_7745c5c3_CtxErr := ctx.Err(); templ_7745c5c3_CtxErr != nil {
			return templ_7745c5c3_CtxErr
		}
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
		if !templ_7745c5c3_IsBuffer {
			defer func() {
				templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err == nil {
					templ_7745c5c3_Err = templ_7745c5c3_BufErr
				}
			}()
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var22 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var22 == nil {
			templ_7745c5c3_Var22 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 38, "<div class=\"ingredient-row\"><input type=\"hidden\" name=\"existing_ingredient_id[]\" value=\"")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		var templ_7745c5c3_Var23 string
		templ_7745c5c3_Var23, templ_7745c5c3_Err = templ.JoinStringErrs(strconv.Itoa(ingredient.IngredientID))
		if templ_7745c5c3_Err != nil {
			return templ.Error{Err: templ_7745c5c3_Err, FileName: `templates/recipe-form.templ`, Line: 188, Col: 100}
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var23))
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 39, "\"> <input type=\"hidden\" name=\"existing_quantity[]\" value=\"")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		var templ_7745c5c3_Var24 string
		templ_7745c5c3_Var24, templ_7745c5c3_Err = templ.JoinStringErrs(fmt.Sprintf("%.2f", ingredient.Quantity))
		if templ_7745c5c3_Err != nil {
			return templ.Error{Err: templ_7745c5c3_Err, FileName: `templates/recipe-form.templ`, Line: 189, Col: 98}
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var24))
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 40, "\"> <input type=\"hidden\" name=\"existing_unit[]\" value=\"")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		var templ_7745c5c3_Var25 string
		templ_7745c5c3_Var25, templ_7745c5c3_Err = templ.JoinStringErrs(ingredient.Unit)
		if templ_7745c5c3_Err != nil {
			return templ.Error{Err: templ_7745c5c3_Err, FileName: `templates/recipe-form.templ`, Line: 190, Col: 69}
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var25))
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 41, "\"> <select name=\"ingredient_select[]\" class=\"form-control ingredient-select\" required><option value=\"\">Select ingredient...</option> ")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		for _, ing := range allIngredients {
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 42, "<option value=\"")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			var templ_7745c5c3_Var26 string
			templ_7745c5c3_Var26, templ_7745c5c3_Err = templ.JoinStringErrs(strconv.Itoa(ing.ID))
			if templ_7745c5c3_Err != nil {
				return templ.Error{Err: templ_7745c5c3_Err, FileName: `templates/recipe-form.templ`, Line: 194, Col: 40}
			}
			_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var26))
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 43, "\"")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			if ing.ID == ingredient.IngredientID {
				templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 44, " selected")
				if templ_7745c5c3_Err != nil {
					return templ_7745c5c3_Err
				}
			}
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 45, ">")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			var templ_7745c5c3_Var27 string
			templ_7745c5c3_Var27, templ_7745c5c3_Err = templ.JoinStringErrs(ing.Name)
			if templ_7745c5c3_Err != nil {
				return templ.Error{Err: templ_7745c5c3_Err, FileName: `templates/recipe-form.templ`, Line: 194, Col: 101}
			}
			_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var27))
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 46, "</option>")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 47, "</select> <input type=\"number\" name=\"quantity_input[]\" class=\"form-control quantity-input\" placeholder=\"Quantity\" step=\"0.1\" min=\"0\" value=\"")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		var templ_7745c5c3_Var28 string
		templ_7745c5c3_Var28, templ_7745c5c3_Err = templ.JoinStringErrs(fmt.Sprintf("%.2f", ingredient.Quantity))
		if templ_7745c5c3_Err != nil {
			return templ.Error{Err: templ_7745c5c3_Err, FileName: `templates/recipe-form.templ`, Line: 198, Col: 96}
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var28))
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 48, "\" required> <select name=\"unit_select[]\" class=\"form-control unit-select\" required><option value=\"\">Unit...</option>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = UnitOptions(ingredient.Unit).Render(ctx, templ_7745c5c3_Buffer)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 49, "</select> <button type=\"button\" class=\"btn btn-danger btn-sm remove-ingredient\"><i class=\"fas fa-times\"></i></button></div>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		return nil
	})
}

func UnitOptions(currentUnit string) templ.Component {
	return templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
		templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
		if templ_7745c5c3_CtxErr := ctx.Err(); templ_7745c5c3_CtxErr != nil {
			return templ_7745c5c3_CtxErr
		}
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
		if !templ_7745c5c3_IsBuffer {
			defer func() {
				templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err == nil {
					templ_7745c5c3_Err = templ_7745c5c3_BufErr
				}
			}()
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var29 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var29 == nil {
			templ_7745c5c3_Var29 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 50, "<optgroup label=\"Volume\"><option value=\"tsp\"")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		if currentUnit == "tsp" {
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 51, " selected")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 52, ">Teaspoon</option> <option value=\"tbsp\"")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		if currentUnit == "tbsp" {
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 53, " selected")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 54, ">Tablespoon</option> <option value=\"cup\"")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		if currentUnit == "cup" {
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 55, " selected")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 56, ">Cup</option> <option value=\"ml\"")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		if currentUnit == "ml" {
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 57, " selected")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 58, ">Milliliter</option> <option value=\"l\"")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		if currentUnit == "l" {
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 59, " selected")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 60, ">Liter</option> <option value=\"fl oz\"")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		if currentUnit == "fl oz" {
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 61, " selected")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 62, ">Fluid Ounce</option></optgroup> <optgroup label=\"Weight\"><option value=\"g\"")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		if currentUnit == "g" {
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 63, " selected")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 64, ">Gram</option> <option value=\"kg\"")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		if currentUnit == "kg" {
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 65, " selected")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 66, ">Kilogram</option> <option value=\"oz\"")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		if currentUnit == "oz" {
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 67, " selected")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 68, ">Ounce</option> <option value=\"lb\"")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		if currentUnit == "lb" {
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 69, " selected")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 70, ">Pound</option></optgroup> <optgroup label=\"Count\"><option value=\"piece\"")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		if currentUnit == "piece" {
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 71, " selected")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 72, ">Piece</option> <option value=\"clove\"")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		if currentUnit == "clove" {
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 73, " selected")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 74, ">Clove</option> <option value=\"slice\"")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		if currentUnit == "slice" {
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 75, " selected")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 76, ">Slice</option> <option value=\"can\"")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		if currentUnit == "can" {
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 77, " selected")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 78, ">Can</option> <option value=\"package\"")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		if currentUnit == "package" {
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 79, " selected")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 80, ">Package</option></optgroup> <optgroup label=\"Other\"><option value=\"pinch\"")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		if currentUnit == "pinch" {
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 81, " selected")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 82, ">Pinch</option> <option value=\"dash\"")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		if currentUnit == "dash" {
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 83, " selected")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 84, ">Dash</option> <option value=\"to taste\"")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		if currentUnit == "to taste" {
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 85, " selected")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 86, ">To taste</option></optgroup>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		return nil
	})
}

func RecipeTagsSection(recipe *models.Recipe, tags []models.Tag) templ.Component {
	return templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
		templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
		if templ_7745c5c3_CtxErr := ctx.Err(); templ_7745c5c3_CtxErr != nil {
			return templ_7745c5c3_CtxErr
		}
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
		if !templ_7745c5c3_IsBuffer {
			defer func() {
				templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err == nil {
					templ_7745c5c3_Err = templ_7745c5c3_BufErr
				}
			}()
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var30 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var30 == nil {
			templ_7745c5c3_Var30 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 87, "<div class=\"form-section\"><h3>Tags</h3><div class=\"tags-selection\"><label>Select Categories/Tags (click to toggle)</label><div class=\"tag-filters\">")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		for _, tag := range tags {
			templ_7745c5c3_Err = TagFilterForForm(tag, recipe).Render(ctx, templ_7745c5c3_Buffer)
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 88, "</div><button type=\"button\" id=\"add-new-tag-btn\" class=\"btn btn-secondary btn-sm\" style=\"margin-top: 1rem;\"><i class=\"fas fa-plus-circle\"></i> Add New Tag</button><div class=\"help-text\"><i class=\"fas fa-info-circle\"></i> Click on tags to select/deselect them for your recipe.</div></div></div>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		return nil
	})
}

func TagFilterForForm(tag models.Tag, recipe *models.Recipe) templ.Component {
	return templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
		templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
		if templ_7745c5c3_CtxErr := ctx.Err(); templ_7745c5c3_CtxErr != nil {
			return templ_7745c5c3_CtxErr
		}
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
		if !templ_7745c5c3_IsBuffer {
			defer func() {
				templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err == nil {
					templ_7745c5c3_Err = templ_7745c5c3_BufErr
				}
			}()
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var31 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var31 == nil {
			templ_7745c5c3_Var31 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		templ_7745c5c3_Err = templ.Raw(`<button type="button" class="tag-filter" data-tag-id="`+strconv.Itoa(tag.ID)+`" data-tag-name="`+tag.Name+`">
		`+tag.Name+`
	</button>
	<input type="checkbox" id="tag_`+strconv.Itoa(tag.ID)+`" name="tags" value="`+strconv.Itoa(tag.ID)+`" class="hidden-checkbox"/>`).Render(ctx, templ_7745c5c3_Buffer)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		return nil
	})
}

func RecipeInstructionsSection(recipe *models.Recipe) templ.Component {
	return templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
		templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
		if templ_7745c5c3_CtxErr := ctx.Err(); templ_7745c5c3_CtxErr != nil {
			return templ_7745c5c3_CtxErr
		}
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
		if !templ_7745c5c3_IsBuffer {
			defer func() {
				templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err == nil {
					templ_7745c5c3_Err = templ_7745c5c3_BufErr
				}
			}()
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var32 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var32 == nil {
			templ_7745c5c3_Var32 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 89, "<div class=\"form-section\"><h3>Instructions</h3><div class=\"form-group\"><label for=\"instructions\">Cooking Instructions *</label> <textarea id=\"instructions\" name=\"instructions\" class=\"form-control instructions-textarea\" rows=\"22\" placeholder=\"Step-by-step cooking instructions\" required>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		var templ_7745c5c3_Var33 string
		templ_7745c5c3_Var33, templ_7745c5c3_Err = templ.JoinStringErrs(getRecipeItem(recipe, models.RecipeItemInstructions, ""))
		if templ_7745c5c3_Err != nil {
			return templ.Error{Err: templ_7745c5c3_Err, FileName: `templates/recipe-form.templ`, Line: 272, Col: 122}
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var33))
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 90, "</textarea></div></div>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		return nil
	})
}

func IngredientModal() templ.Component {
	return templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
		templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
		if templ_7745c5c3_CtxErr := ctx.Err(); templ_7745c5c3_CtxErr != nil {
			return templ_7745c5c3_CtxErr
		}
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
		if !templ_7745c5c3_IsBuffer {
			defer func() {
				templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err == nil {
					templ_7745c5c3_Err = templ_7745c5c3_BufErr
				}
			}()
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var34 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var34 == nil {
			templ_7745c5c3_Var34 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 91, "<div id=\"ingredient-modal\" class=\"modal hidden\"><div class=\"modal-content\"><div class=\"modal-header\"><h3><i class=\"fas fa-plus-circle\"></i> Add New Ingredient</h3><button type=\"button\" class=\"modal-close\"><i class=\"fas fa-times\"></i></button></div><div class=\"modal-body\"><form id=\"new-ingredient-form\"><div class=\"form-group\"><label for=\"new-ingredient-name\">Ingredient Name *</label> <input type=\"text\" id=\"new-ingredient-name\" class=\"form-control\" placeholder=\"e.g., Olive Oil, Chicken Breast, etc.\" required></div><div class=\"modal-actions\"><button type=\"button\" class=\"btn btn-secondary modal-close\"><i class=\"fas fa-times\"></i> Cancel</button> <button type=\"submit\" class=\"btn btn-primary\"><i class=\"fas fa-save\"></i> Add Ingredient</button></div></form></div></div></div>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		return nil
	})
}

func TagModal() templ.Component {
	return templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
		templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
		if templ_7745c5c3_CtxErr := ctx.Err(); templ_7745c5c3_CtxErr != nil {
			return templ_7745c5c3_CtxErr
		}
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
		if !templ_7745c5c3_IsBuffer {
			defer func() {
				templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err == nil {
					templ_7745c5c3_Err = templ_7745c5c3_BufErr
				}
			}()
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var35 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var35 == nil {
			templ_7745c5c3_Var35 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 92, "<div id=\"tag-modal\" class=\"modal hidden\"><div class=\"modal-content\"><div class=\"modal-header\"><h3><i class=\"fas fa-tag\"></i> Add New Tag</h3><button type=\"button\" class=\"modal-close\"><i class=\"fas fa-times\"></i></button></div><div class=\"modal-body\"><form id=\"new-tag-form\"><div class=\"form-group\"><label for=\"new-tag-name\">Tag Name *</label> <input type=\"text\" id=\"new-tag-name\" class=\"form-control\" placeholder=\"e.g., Dessert, Quick &amp; Easy, etc.\" required></div><div class=\"form-group\"><label for=\"new-tag-color\">Tag Color</label> <input type=\"color\" id=\"new-tag-color\" class=\"form-control\" value=\"#ff6b6b\"></div><div class=\"modal-actions\"><button type=\"button\" class=\"btn btn-secondary modal-close\"><i class=\"fas fa-times\"></i> Cancel</button> <button type=\"submit\" class=\"btn btn-primary\"><i class=\"fas fa-save\"></i> Add Tag</button></div></form></div></div></div>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		return nil
	})
}

func RecipeFormScript(recipe *models.Recipe, ingredients []models.Ingredient) templ.Component {
	return templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
		templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
		if templ_7745c5c3_CtxErr := ctx.Err(); templ_7745c5c3_CtxErr != nil {
			return templ_7745c5c3_CtxErr
		}
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
		if !templ_7745c5c3_IsBuffer {
			defer func() {
				templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err == nil {
					templ_7745c5c3_Err = templ_7745c5c3_BufErr
				}
			}()
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var36 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var36 == nil {
			templ_7745c5c3_Var36 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 93, "<script>\n\t\t// Recipe form functionality using RecipeBook core - CLEANED UP VERSION\n\t\tlet ingredientCounter = 0;\n\t\tlet allIngredients = [\n\t\t\tfor _, ingredient := range ingredients {\n\t\t\t\t{id: { strconv.Itoa(ingredient.ID) }, name: \"{ ingredient.Name }\"},\n\t\t\t}\n\t\t];\n\t\tconst isEditMode = { if recipe != nil { \"true\" } else { \"false\" } };\n\t\tconst recipeId = { if recipe != nil { strconv.Itoa(recipe.ID) } else { \"null\" } };\n\t\t\n\t\t// Wait for RecipeBook to be initialized\n\t\tRecipeBook.on('app:initialized', function() {\n\t\t\tinitializeRecipeForm();\n\t\t\tinitializeTagButtons();\n\t\t\tsetServingUnitValue();\n\t\t\tinitializeImageHandling();\n\t\t\tinitializeIngredientRows();\n\t\t});\n\t\t\n\t\tfunction initializeRecipeForm() {\n\t\t\tconst form = document.getElementById('recipeForm');\n\t\t\t\n\t\t\tform.addEventListener('submit', async function(e) {\n\t\t\t\te.preventDefault();\n\t\t\t\t\n\t\t\t\t// Use centralized validation\n\t\t\t\tif (!validateRecipeForm(this)) return;\n\t\t\t\t\n\t\t\t\tconst submitBtn = this.querySelector('button[type=\"submit\"]');\n\t\t\t\tconst removeLoading = RecipeBook.addLoadingState(submitBtn, 'Saving...');\n\t\t\t\t\n\t\t\t\ttry {\n\t\t\t\t\tconst formData = new FormData(this);\n\t\t\t\t\tconst url = isEditMode ? `/recipe/${recipeId}/edit` : '/api/recipes';\n\t\t\t\t\t\n\t\t\t\t\tconst response = await RecipeBook.apiRequest(url, {\n\t\t\t\t\t\tmethod: 'POST',\n\t\t\t\t\t\tbody: formData\n\t\t\t\t\t});\n\t\t\t\t\t\n\t\t\t\t\tif (response.success) {\n\t\t\t\t\t\tRecipeBook.showNotification(response.message, 'success');\n\t\t\t\t\t\tsetTimeout(() => {\n\t\t\t\t\t\t\twindow.location.href = response.redirect;\n\t\t\t\t\t\t}, 1000);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tRecipeBook.showNotification(response.error || 'Failed to save recipe', 'error');\n\t\t\t\t\t}\n\t\t\t\t} catch (error) {\n\t\t\t\t\tconsole.error('Recipe save error:', error);\n\t\t\t\t\tRecipeBook.showNotification('Failed to save recipe. Please try again.', 'error');\n\t\t\t\t} finally {\n\t\t\t\t\tremoveLoading();\n\t\t\t\t}\n\t\t\t});\n\t\t\t\n\t\t\t// Button event listeners\n\t\t\tdocument.getElementById('add-ingredient').addEventListener('click', addIngredientRow);\n\t\t\tdocument.getElementById('add-new-ingredient-btn').addEventListener('click', () => openModal('ingredient-modal'));\n\t\t\tdocument.getElementById('add-new-tag-btn').addEventListener('click', () => openModal('tag-modal'));\n\t\t\tdocument.getElementById('new-ingredient-form').addEventListener('submit', createNewIngredient);\n\t\t\tdocument.getElementById('new-tag-form').addEventListener('submit', createNewTag);\n\t\t}\n\t\t\n\t\tfunction initializeTagButtons() {\n\t\t\tdocument.querySelectorAll('.tag-filter').forEach(button => {\n\t\t\t\tconst tagId = button.dataset.tagId;\n\t\t\t\tconst checkbox = document.getElementById('tag_' + tagId);\n\t\t\t\t\n\t\t\t\t// Set initial state for edit mode\n\t\t\t\tif (checkbox && checkbox.checked) {\n\t\t\t\t\tbutton.classList.add('active');\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tbutton.addEventListener('click', function() {\n\t\t\t\t\tif (checkbox) {\n\t\t\t\t\t\tcheckbox.checked = !checkbox.checked;\n\t\t\t\t\t\tbutton.classList.toggle('active', checkbox.checked);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t});\n\t\t}\n\t\t\n\t\tfunction setServingUnitValue() {\n\t\t\tconst servingUnitSelect = document.getElementById('serving_unit');\n\t\t\tif (servingUnitSelect) {\n\t\t\t\tconst currentValue = servingUnitSelect.dataset.value || 'people';\n\t\t\t\tservingUnitSelect.value = currentValue;\n\t\t\t}\n\t\t}\n\t\t\n\t\tfunction initializeImageHandling() {\n\t\t\t// Image deletion\n\t\t\tdocument.querySelectorAll('.delete-image').forEach(button => {\n\t\t\t\tbutton.addEventListener('click', async function() {\n\t\t\t\t\tconst imageId = this.dataset.imageId;\n\t\t\t\t\tconst imageItem = this.closest('.image-item');\n\t\t\t\t\t\n\t\t\t\t\tif (confirm('Are you sure you want to delete this image?')) {\n\t\t\t\t\t\tconst removeLoading = RecipeBook.addLoadingState(this, '');\n\t\t\t\t\t\t\n\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\tconst response = await RecipeBook.apiRequest(`/api/images/${imageId}`, {\n\t\t\t\t\t\t\t\tmethod: 'DELETE'\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tif (response.success) {\n\t\t\t\t\t\t\t\tRecipeBook.hideElement(imageItem);\n\t\t\t\t\t\t\t\tRecipeBook.showNotification('Image deleted successfully', 'success');\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tRecipeBook.showNotification('Failed to delete image', 'error');\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} catch (error) {\n\t\t\t\t\t\t\tconsole.error('Image deletion error:', error);\n\t\t\t\t\t\t\tRecipeBook.showNotification('Failed to delete image', 'error');\n\t\t\t\t\t\t} finally {\n\t\t\t\t\t\t\tremoveLoading();\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t});\n\t\t\t\n\t\t\t// Image upload preview\n\t\t\tdocument.getElementById('recipe_images').addEventListener('change', function(e) {\n\t\t\t\tconst files = e.target.files;\n\t\t\t\tconst container = document.getElementById('image-preview-container');\n\t\t\t\tcontainer.innerHTML = '';\n\t\t\t\t\n\t\t\t\tfor (let i = 0; i < files.length; i++) {\n\t\t\t\t\tconst file = files[i];\n\t\t\t\t\tif (file.type.startsWith('image/')) {\n\t\t\t\t\t\tconst reader = new FileReader();\n\t\t\t\t\t\treader.onload = function(e) {\n\t\t\t\t\t\t\tconst previewDiv = document.createElement('div');\n\t\t\t\t\t\t\tpreviewDiv.className = 'image-preview-item';\n\t\t\t\t\t\t\tpreviewDiv.innerHTML = `\n\t\t\t\t\t\t\t\t<img src=\"${e.target.result}\" alt=\"Preview\" class=\"image-preview\">\n\t\t\t\t\t\t\t\t<input type=\"text\" name=\"image_captions\" placeholder=\"Caption for this image\" class=\"form-control image-caption-input\">\n\t\t\t\t\t\t\t\t<button type=\"button\" class=\"btn btn-danger btn-sm remove-preview\" onclick=\"this.closest('.image-preview-item').remove()\">\n\t\t\t\t\t\t\t\t\t<i class=\"fas fa-times\"></i>\n\t\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t\t`;\n\t\t\t\t\t\t\tcontainer.appendChild(previewDiv);\n\t\t\t\t\t\t};\n\t\t\t\t\t\treader.readAsDataURL(file);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t\t\n\t\tfunction initializeIngredientRows() {\n\t\t\t// Initialize existing ingredient rows\n\t\t\tdocument.querySelectorAll('.ingredient-row .remove-ingredient').forEach(btn => {\n\t\t\t\tbtn.addEventListener('click', function() {\n\t\t\t\t\tthis.closest('.ingredient-row').remove();\n\t\t\t\t});\n\t\t\t});\n\t\t}\n\t\t\n\t\tfunction openModal(modalId) {\n\t\t\tconst modal = document.getElementById(modalId);\n\t\t\tmodal.classList.remove('hidden');\n\t\t\tmodal.style.display = 'flex';\n\t\t\t\n\t\t\t// Focus first input\n\t\t\tconst firstInput = modal.querySelector('input[type=\"text\"]');\n\t\t\tif (firstInput) firstInput.focus();\n\t\t}\n\t\t\n\t\tfunction closeModal(modalId) {\n\t\t\tconst modal = document.getElementById(modalId);\n\t\t\tmodal.classList.add('hidden');\n\t\t\tmodal.style.display = 'none';\n\t\t\t\n\t\t\t// Clear form\n\t\t\tconst form = modal.querySelector('form');\n\t\t\tif (form) form.reset();\n\t\t\tif (modalId === 'tag-modal') {\n\t\t\t\tdocument.getElementById('new-tag-color').value = '#ff6b6b';\n\t\t\t}\n\t\t}\n\t\t\n\t\tasync function createNewIngredient(e) {\n\t\t\te.preventDefault();\n\t\t\t\n\t\t\tconst form = e.target;\n\t\t\tconst nameInput = form.querySelector('#new-ingredient-name');\n\t\t\tconst name = nameInput.value.trim();\n\t\t\t\n\t\t\tif (!validateIngredientForm(form)) return;\n\t\t\t\n\t\t\tif (allIngredients.some(ing => ing.name.toLowerCase() === name.toLowerCase())) {\n\t\t\t\tRecipeBook.showNotification('This ingredient already exists', 'error');\n\t\t\t\treturn;\n\t\t\t}\n\t\t\t\n\t\t\tconst submitBtn = form.querySelector('button[type=\"submit\"]');\n\t\t\tconst removeLoading = RecipeBook.addLoadingState(submitBtn, 'Adding...');\n\t\t\t\n\t\t\ttry {\n\t\t\t\tconst response = await RecipeBook.apiRequest('/api/ingredients', {\n\t\t\t\t\tmethod: 'POST',\n\t\t\t\t\theaders: { 'Content-Type': 'application/json' },\n\t\t\t\t\tbody: JSON.stringify({ name: name })\n\t\t\t\t});\n\t\t\t\t\n\t\t\t\tif (response.success) {\n\t\t\t\t\tconst newId = Math.max(...allIngredients.map(i => i.id), 0) + 1;\n\t\t\t\t\tallIngredients.push({id: newId, name: name});\n\t\t\t\t\tupdateIngredientSelects();\n\t\t\t\t\tcloseModal('ingredient-modal');\n\t\t\t\t\tRecipeBook.showNotification(response.message, 'success');\n\t\t\t\t} else {\n\t\t\t\t\tRecipeBook.showNotification(response.error || 'Failed to create ingredient', 'error');\n\t\t\t\t}\n\t\t\t} catch (error) {\n\t\t\t\tconsole.error('Ingredient creation error:', error);\n\t\t\t\tRecipeBook.showNotification('Failed to create ingredient', 'error');\n\t\t\t} finally {\n\t\t\t\tremoveLoading();\n\t\t\t}\n\t\t}\n\t\t\n\t\tasync function createNewTag(e) {\n\t\t\te.preventDefault();\n\t\t\t\n\t\t\tconst form = e.target;\n\t\t\tconst nameInput = form.querySelector('#new-tag-name');\n\t\t\tconst colorInput = form.querySelector('#new-tag-color');\n\t\t\tconst name = nameInput.value.trim();\n\t\t\tconst color = colorInput.value || '#ff6b6b';\n\t\t\t\n\t\t\tif (!validateTagForm(form)) return;\n\t\t\t\n\t\t\tconst submitBtn = form.querySelector('button[type=\"submit\"]');\n\t\t\tconst removeLoading = RecipeBook.addLoadingState(submitBtn, 'Adding...');\n\t\t\t\n\t\t\ttry {\n\t\t\t\tconst response = await RecipeBook.apiRequest('/api/tags', {\n\t\t\t\t\tmethod: 'POST',\n\t\t\t\t\theaders: { 'Content-Type': 'application/json' },\n\t\t\t\t\tbody: JSON.stringify({ name: name, color: color })\n\t\t\t\t});\n\t\t\t\t\n\t\t\t\tif (response.success) {\n\t\t\t\t\t// Add new tag to the form\n\t\t\t\t\tconst tagFiltersDiv = document.querySelector('.tag-filters');\n\t\t\t\t\tconst newButton = document.createElement('button');\n\t\t\t\t\tnewButton.type = 'button';\n\t\t\t\t\tnewButton.className = 'tag-filter active';\n\t\t\t\t\tnewButton.dataset.tagId = 'new-' + Date.now();\n\t\t\t\t\tnewButton.dataset.tagName = name;\n\t\t\t\t\tnewButton.textContent = name;\n\t\t\t\t\t\n\t\t\t\t\tconst newCheckbox = document.createElement('input');\n\t\t\t\t\tnewCheckbox.type = 'checkbox';\n\t\t\t\t\tnewCheckbox.name = 'new_tags[]';\n\t\t\t\t\tnewCheckbox.value = name;\n\t\t\t\t\tnewCheckbox.checked = true;\n\t\t\t\t\tnewCheckbox.className = 'hidden-checkbox';\n\t\t\t\t\tnewCheckbox.style.display = 'none';\n\t\t\t\t\t\n\t\t\t\t\tnewButton.addEventListener('click', function() {\n\t\t\t\t\t\tnewCheckbox.checked = !newCheckbox.checked;\n\t\t\t\t\t\tnewButton.classList.toggle('active', newCheckbox.checked);\n\t\t\t\t\t});\n\t\t\t\t\t\n\t\t\t\t\ttagFiltersDiv.appendChild(newButton);\n\t\t\t\t\ttagFiltersDiv.appendChild(newCheckbox);\n\t\t\t\t\t\n\t\t\t\t\tcloseModal('tag-modal');\n\t\t\t\t\tRecipeBook.showNotification(response.message, 'success');\n\t\t\t\t} else {\n\t\t\t\t\tRecipeBook.showNotification(response.error || 'Failed to create tag', 'error');\n\t\t\t\t}\n\t\t\t} catch (error) {\n\t\t\t\tconsole.error('Tag creation error:', error);\n\t\t\t\tRecipeBook.showNotification('Failed to create tag', 'error');\n\t\t\t} finally {\n\t\t\t\tremoveLoading();\n\t\t\t}\n\t\t}\n\t\t\n\t\tfunction updateIngredientSelects() {\n\t\t\tconst selects = document.querySelectorAll('.ingredient-select');\n\t\t\tselects.forEach(select => {\n\t\t\t\tconst currentValue = select.value;\n\t\t\t\tselect.innerHTML = '<option value=\"\">Select ingredient...</option>';\n\t\t\t\tallIngredients.forEach(ingredient => {\n\t\t\t\t\tconst option = document.createElement('option');\n\t\t\t\t\toption.value = ingredient.id;\n\t\t\t\t\toption.textContent = ingredient.name;\n\t\t\t\t\tif (ingredient.id == currentValue) {\n\t\t\t\t\t\toption.selected = true;\n\t\t\t\t\t}\n\t\t\t\t\tselect.appendChild(option);\n\t\t\t\t});\n\t\t\t});\n\t\t}\n\t\t\n\t\tfunction addIngredientRow() {\n\t\t\tconst container = document.getElementById('ingredients-container');\n\t\t\tconst row = document.createElement('div');\n\t\t\trow.className = 'ingredient-row';\n\t\t\t\n\t\t\tlet ingredientOptions = '<option value=\"\">Select ingredient...</option>';\n\t\t\tallIngredients.forEach(ingredient => {\n\t\t\t\tingredientOptions += `<option value=\"${ingredient.id}\">${ingredient.name}</option>`;\n\t\t\t});\n\t\t\t\n\t\t\trow.innerHTML = `\n\t\t\t\t<select name=\"new_ingredient_id[]\" class=\"form-control ingredient-select\" required>\n\t\t\t\t\t${ingredientOptions}\n\t\t\t\t</select>\n\t\t\t\t<input type=\"number\" name=\"new_quantity[]\" class=\"form-control quantity-input\" \n\t\t\t\t\t   placeholder=\"Quantity\" step=\"0.1\" min=\"0\" required>\n\t\t\t\t<select name=\"new_unit[]\" class=\"form-control unit-select\" required>\n\t\t\t\t\t<option value=\"\">Unit...</option>\n\t\t\t\t\t<optgroup label=\"Volume\">\n\t\t\t\t\t\t<option value=\"tsp\">Teaspoon</option>\n\t\t\t\t\t\t<option value=\"tbsp\">Tablespoon</option>\n\t\t\t\t\t\t<option value=\"cup\">Cup</option>\n\t\t\t\t\t\t<option value=\"ml\">Milliliter</option>\n\t\t\t\t\t\t<option value=\"l\">Liter</option>\n\t\t\t\t\t\t<option value=\"fl oz\">Fluid Ounce</option>\n\t\t\t\t\t</optgroup>\n\t\t\t\t\t<optgroup label=\"Weight\">\n\t\t\t\t\t\t<option value=\"g\">Gram</option>\n\t\t\t\t\t\t<option value=\"kg\">Kilogram</option>\n\t\t\t\t\t\t<option value=\"oz\">Ounce</option>\n\t\t\t\t\t\t<option value=\"lb\">Pound</option>\n\t\t\t\t\t</optgroup>\n\t\t\t\t\t<optgroup label=\"Count\">\n\t\t\t\t\t\t<option value=\"piece\">Piece</option>\n\t\t\t\t\t\t<option value=\"clove\">Clove</option>\n\t\t\t\t\t\t<option value=\"slice\">Slice</option>\n\t\t\t\t\t\t<option value=\"can\">Can</option>\n\t\t\t\t\t\t<option value=\"package\">Package</option>\n\t\t\t\t\t</optgroup>\n\t\t\t\t\t<optgroup label=\"Other\">\n\t\t\t\t\t\t<option value=\"pinch\">Pinch</option>\n\t\t\t\t\t\t<option value=\"dash\">Dash</option>\n\t\t\t\t\t\t<option value=\"to taste\">To taste</option>\n\t\t\t\t\t</optgroup>\n\t\t\t\t</select>\n\t\t\t\t<button type=\"button\" class=\"btn btn-danger btn-sm remove-ingredient\">\n\t\t\t\t\t<i class=\"fas fa-times\"></i>\n\t\t\t\t</button>\n\t\t\t`;\n\t\t\t\n\t\t\tcontainer.appendChild(row);\n\t\t\t\n\t\t\trow.querySelector('.remove-ingredient').addEventListener('click', function() {\n\t\t\t\trow.remove();\n\t\t\t});\n\t\t}\n\t\t\n\t\t// Modal event listeners - use RecipeBook modal system\n\t\tdocument.querySelectorAll('.modal').forEach(modal => {\n\t\t\tmodal.addEventListener('click', function(e) {\n\t\t\t\tif (e.target === this) {\n\t\t\t\t\tcloseModal(this.id);\n\t\t\t\t}\n\t\t\t});\n\t\t\t\n\t\t\tmodal.querySelectorAll('.modal-close').forEach(btn => {\n\t\t\t\tbtn.addEventListener('click', () => closeModal(modal.id));\n\t\t\t});\n\t\t});\n\t\t\n\t\t// Escape key to close modals\n\t\tdocument.addEventListener('keydown', function(e) {\n\t\t\tif (e.key === 'Escape') {\n\t\t\t\t['ingredient-modal', 'tag-modal'].forEach(modalId => {\n\t\t\t\t\tconst modal = document.getElementById(modalId);\n\t\t\t\t\tif (modal && !modal.classList.contains('hidden')) {\n\t\t\t\t\t\tcloseModal(modalId);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}\n\t\t});\n\t</script>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		return nil
	})
}

var _ = templruntime.GeneratedTemplate
